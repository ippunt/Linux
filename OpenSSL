Resources:
https://gist.github.com/fntlnz/cf14feb5a46b2eda428e000157447309 
0.1 Joining with OpenSSL client to view data, or verify certs
0.2) Validating key and cert belong to each other
1. Create key and CSR for issuer to sign
2. One liner key and certificate out. Key not encrypted
3. Viewing and verifying certs
4. Command Reference
5. PEM binding and some notes
6. Create Certs with Root cert for web server and server client auth Utilize config file for attributes names and IPs
7. Conversions
8. Encrypt and Decrypt data with openssl
9. Good docs on file usage
10. Encrypt and salt password
11. Encrypt your private key
12. Create an intermediate Certifier
13. Create PKS12



0.1)
openssl s_client -connect localhost:30001 
openssl s_client -showcerts -connect mysub.mydomain.it:443
0.2)
Keys and certificates have the same exact modulus. 
openssl x509 -noout -modulus -in cs_cert.crt | openssl md5
openssl rsa -noout -modulus -in cs_privkey.txt | openssl md5 
openssl req -noout -modulus -in cs_privkey.txt | openssl md5 

1)
openssl genrsa –aes192 -out My_Private_key.key 4096
openssl req –new –key My_Private_key.key -out My_CSR.csr

2)
openssl req -x509 -newkey –nodes rsa:4096 -keyout key.pem -out cert.pem -days 360
You wouldn't want it encrypted if application has to access it. 

3)
openssl x509 -in example-com.cert.pem -text –noout; Verify Certificate 
openssl x509 -in example-com.cert.crt -text –noout; Verify Certificate 
openssl req -in example-com.req.pem -text –noout; Verify CSR 
openssl req -text -noout -verify -in MY-CertificateSIgningRequest.csr; Verify CSR 
openssl rsa –in mykeyfile.key -text –noout; Verify CA key 

How would you knoow if two match each other without documentation? Modulus will be matching. 

4)
-req – PKCS Certificate request and certificate generation utility 
-x509 - outputs a self-signed rather than a Certificate Request 
-genrsa   - outputs a private key 
-newkey arg – creates a new cert req and key. Takes rsa:nbits as args 
-keyout – gives the filename for the private key to output to 
-out – This specifies the output filename to write to or standard out by default 
-days n – when –x509 is being used this creates the validity of the cert in days. The default is 30 
-nodes when private key is created do not encrypt 
-des3  encrypts the private key 
-noout omits output of encoded version 
-nocerts only output private key 
-nokeys only output certificate.  
-addext "extendedKeyUsage = serverAuth, clientAuth"; openssl version need be beyond 1.1.1 

5)

There are multiple formats used to create certificate bundles, depending on the format of the certificate. Using a privacy-enhanced mail (PEM) certificate to create bundles is popular due to the simple text format of those certificates. To create a PEM certificate bundle, it is enough to copy each certificate in the opposite issuing order in a text file, typically assigning a .pem extension. 

 

To create a PEM certificate bundle, copy certificates in reverse order, omitting the final SSL certificate: 

Root.crt is the root certificate 
Intermediate1.crt is the intermediate certificate 1 
Intermediate2.crt is the intermediate certificate 2 

My_certificate.crt is the final requested SSL certificate 
# Create a certificate bundle mychain.ca-bundle in Linux 
cat Intermediate2.crt  Intermediate1.crt Root.crt > mychain.pem 
# Create a certificate bundle mychain.ca-bundle in Windows 
copy Intermediate2.crt +  Intermediate1.crt + Root.crt mychain.pem


6)

Generate Private key: 
openssl genrsa -des3 -out hostname.LAN.LOCAL.key 2048 
No Encrypted Private key: openssl genrsa -out hostname.LAN.LOCAL.key 4096

Gen public key in the CSR: 
openssl req -new -key hostname.LAN.LOCAL.key -config /MyDirStruct/config.cnf -extensions v3_req -out hostname.LAN.LOCAL.csr  

Generate public key: 
openssl x509 -req -in hostname.LAN.LOCAL.csr -CA Me.LOCAL.Root-Cert-SigningCertificate.pem -CAkey LAN.LOCAL.root-key.pem -CAcreateserial -out hostname.LAN.LOCAL.crt -days 360 -sha256 -extfile /MyCirStruct/config.cnf -extensions v3_req 

You may need a -extfile dependant on OpenSSL Version

It may be something like this:
[req] 

default_bits = 2048 

encrypt_key = no 

default_md = sha256 

distinguished_name = req_distinguished_name 

prompt = no 

req_extensions = v3_req 

  

[req_distinguished_name] 

C = US 

ST = CA 

L = MyCity 

O = MyOrg 

OU = IT 

CN = myhost.local.lan 

  

[v3_req] 

extendedKeyUsage = serverAuth, clientAuth 

subjectAltName = @alt_names 

  

[alt_names] 

DNS.1 = myhost1.local.lan 

DNS.2 = myhost2.local.lan 

IP.1 = 1.1.1.1 

IP.2 = 2.2.2.2 
__________________________________________________________________________________________________________EOF

 
7)
Convert x509 to PEM 
 

openssl x509 -in certificatename.cer -outform PEM -out certificatename.pem 

 
 
Convert PEM to DER 

openssl x509 -outform der -in certificatename.pem -out certificatename.der 

 
 
Convert DER to PEM 

openssl x509 -inform der -in certificatename.der -out certificatename.pem 

 
 
Convert PEM to P7B 

Note: The PKCS#7 or P7B format is stored in Base64 ASCII format and has a file extension of .p7b or .p7c. 
A P7B file only contains certificates and chain certificates (Intermediate CAs), not the private key. The most common platforms that support P7B files are Microsoft Windows and Java Tomcat. 

openssl crl2pkcs7 -nocrl -certfile certificatename.pem -out certificatename.p7b -certfile CACert.cer 

 
 
Convert PKCS7 to PEM 

openssl pkcs7 -print_certs -in certificatename.p7b -out certificatename.pem 

 
 
Convert pfx to PEM 

Note: The PKCS#12 or PFX format is a binary format for storing the server certificate, intermediate certificates, and the private key in one encryptable file. PFX files usually have extensions such as .pfx and .p12. PFX files are typically used on Windows machines to import and export certificates and private keys. 

openssl pkcs12 -in certificatename.pfx -out certificatename.pem 

 
 
Convert PFX to PKCS#8 
Note: This requires 2 commands 
 
STEP 1: Convert PFX to PEM 

openssl pkcs12 -in certificatename.pfx -nocerts -nodes -out certificatename.pem 

 
 
STEP 2: Convert PEM to PKCS8 

openSSL pkcs8 -in certificatename.pem -topk8 -nocrypt -out certificatename.pk8 

 
 
Convert P7B to PFX 
Note: This requires 2 commands 
 
STEP 1: Convert P7B to CER 

openssl pkcs7 -print_certs -in certificatename.p7b -out certificatename.cer 

 
 
STEP 2: Convert CER and Private Key to PFX 

openssl pkcs12 -export -in certificatename.cer -inkey privateKey.key -out certificatename.pfx -certfile  cacert.cer 

8)
openssl genrsa -out private.pem 1024; private key
openssl rsa -in private.pem -pubout -out public.pem
openssl rsa -in private.pem -out public.pem -outform PEM -pubout;# Just has some more specifities. 

echo 'too many secrets' > file.txt
openssl rsautl -encrypt -inkey public.pem -pubin -in file.txt -out file.ssl
openssl rsautl -decrypt -inkey private.pem -in file.ssl -out decrypted.txt
 
 9)
 https://www.openssl.org/docs/man1.1.1/man5/x509v3_config.html 
https://pki-tutorial.readthedocs.io/en/latest/expert/client.conf.html 


10)
# openssl passwd -6 -salt BHISWASHERE Fall2021! 
$6$BHISWASHERE$M.ngiEju5sTwrsxbs3gRK/Ok.mp948HNn5x1PrB6UK3q/3acozGjEQtVSRZ4KUBmU02iI.TdJGhqNBj4ttbzI1  

11)
openssl rsa -aes256 -in your.key -out your.encrypted.key 

12) Create an intermediate Certifier

You only get one option with extensions, so when you use-> -extensions v3_intermediate_ca; for your intermediate CA servers.  

 

[ v3_ca ] 
subjectKeyIdentifier=hash 
authorityKeyIdentifier=keyid:always,issuer 
basicConstraints = critical,CA:true 

[ v3_intermediate_ca ] 
subjectKeyIdentifier = hash 
authorityKeyIdentifier = keyid:always,issuer 
basicConstraints = critical, CA:true, pathlen:0 
keyUsage = critical, digitalSignature, cRLSign, keyCertSign 

13)pkcs12

openssl pkcs12 -export -out MITM.pfx -inkey privateKey.key -in certificate.crt -certfile Root-CA.pem 
https://www.ssl.com/how-to/create-a-pfx-p12-certificate-file-using-openssl/ 
If the pkcs12 is to package for an appliance you will likely need to include Cert, Key, Root Certificate and you are creating the pfx.  
